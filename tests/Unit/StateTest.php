<?php

namespace Tests\Unit;

use App\Country;
use App\State;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class StateTest extends TestCase
{
    use DatabaseTransactions;

    protected $header = [];
    protected $state;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->header['Accept'] = 'application/json';
        $this->state = factory(State::class)->create();
    }

    public function testCreateState()
    {
        $response = $this->withHeaders([
            'Content-Type' =>  $this->header['Accept']
        ])->json('POST', 'api/v1/state', ['name' => $this->state->name, 'country_id' => $this->state->country_id]);

        $response->assertStatus(200)->assertJsonFragment([
            'status' => 'success',
            'data' => null
        ]);
    }

    public function testInvalidStateRequest()
    {
        $response = $this->withHeaders([
            'Content-Type' =>  $this->header['Accept']
        ])->json('POST', 'api/v1/state', ['name' => '', 'country_id' => $this->state->country_id]);

        $response->assertStatus(200)->assertJsonFragment([
            'status' => 'error',
            'data' => null
        ]);
    }

    public function testInvalidStateRequestWithoutCountry()
    {
        $response = $this->withHeaders([
            'Content-Type' =>  $this->header['Accept']
        ])->json('POST', 'api/v1/state', ['name' => 'Nigeria', 'country_id' => '']);

        $response->assertStatus(200)->assertJsonFragment([
            'status' => 'error',
            'data' => null
        ]);
    }
}
